    





if __name__ == '__main__':
    # load token from .env
    config = dotenv_values(".env")
    TOKEN = config['TOKEN']
    # TOKEN={My Token}

    # Load Simples Bot Brain loading rules from a CSV
    brain = SimpleBrain(id='bot-1')
    brain.load('brain-1.csv')

    # Kick start the Bot Runner process
    bot = DiscordBot(token=TOKEN, brain=brain, debug=True)
    bot.run()


###
### DEBUG
###









def _enqueue(self, goal=Context._):
        """ 
        Enqueue a Plan in a Context onto the Plan Queue
        """
        target = self.beliefs
        target.namespace = goal

         # CUT-SHORT conditions
        if target not in self.plans:
            return 
        
        # Load Plan Queue with elements of the Plan
        for plan, subs, _ in target.result:
            for subplan in plan.target:
                self._plan_queue.append(Agent._substitutions(subplan, subs))
        return

    def _action(self):
        """ 
        Execute the next action in the Action Queue 
        """

        # CUT-SHORT conditions
        if not self._action_queue:
            return
        
        # Load next (Action, Parameters) from Action Queue
        action, *params = self._action_queue.popleft() if isinstance(self._action_queue[0], tuple) \
              else (self._action_queue.popleft(), None)

        # Execute Action
        if action in self.capabilities:
            pass
        return 

    def _step(self):
        """ 
        Execute the next step in the Plan Queue 
        """

        # CUT-SHORT conditions
        if not self._plan_queue:
            return
        
        # Execute next step of the plan
        # This code is very rule-ish on purpose, for clarity
        step = self._plan_queue.popleft()

        # If a Plan, queue sub-plans
        if isinstance(step, tuple) and isinstance(step[0], Plan): 
            for subelement in reversed(step[0].target):
                self._plan_queue.appendleft(subelement)

        # If a Capability, queue for execution
        elif (isinstance(step, tuple) and isinstance(step[0], str) and step[0].startswith('@')):
                action, *params = step 
                self._action_queue.append((action, params))

        # If a CUT, clear the queue
        elif isinstance(step, str) and step == Plan.CUT: 
                self._plan_queue.clear()

        # If a SubPLan, process Goal
        elif (isinstance(step, tuple) and isinstance(step[0], str)) or \
             (isinstance(step, str)):    
                print('SubPlan>', step)
        else:
            raise ValueError(f'Agent._step: something weird in the plan queue, {step}')
        return


        def run(self, goal=Context._):
        """ 
        Execute commands in Execution Queue 
        """



        # (1) Load and Execute steps from Plan Queue
        self._enqueue(goal=goal)
        while(self._plan_queue and counter < Agent.STEPS):
            ag._step()
        
        # (2) Execute any actions inserted to Action Queue
        # @TODO to be improved, this process could be handled by a Consumer Thread
        while(self._action_queue):
            ag._action()
        return 
    